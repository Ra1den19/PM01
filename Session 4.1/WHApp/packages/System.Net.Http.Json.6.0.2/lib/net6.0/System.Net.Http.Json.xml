<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Net.Http.Json</name>
    </assembly>
    <members>
        <member name="T:System.Net.Http.Json.HttpClientJsonExtensions">
            <summary>
            Contains the extensions methods for using JSON as the content-type in HttpClient.
            </summary>
        </member>
        <member name="M:System.Net.Http.Json.JsonContent`1.SerializeToStreamAsyncCore(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Based on <see cref="M:System.Net.Http.Json.JsonContent.SerializeToStreamAsyncCore(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)"/>.
            The difference is that this implementation calls overloads of <see cref="T:System.Text.Json.JsonSerializer"/> that take type metadata directly.
            This is done to avoid rooting unused, built-in <see cref="T:System.Text.Json.Serialization.JsonConverter"/>s and reflection-based
            warm-up logic (to reduce app size and be trim-friendly), post trimming.
            </summary>
        </member>
        <member name="P:System.SR.Argument_InvalidOffLen">
            <summary>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</summary>
        </member>
        <member name="P:System.SR.CharSetInvalid">
            <summary>The character set provided in ContentType is invalid.</summary>
        </member>
        <member name="P:System.SR.CharSetNotSupported">
            <summary>The character set provided in ContentType is not supported.</summary>
        </member>
        <member name="P:System.SR.SerializeWrongType">
            <summary>The specified type {0} must derive from the specific value's type {1}.</summary>
        </member>
    </members>
</doc>
